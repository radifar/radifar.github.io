[{"content":"There are many ways to improve structure-based virtual screening, from something as simple as screening the ligand based on the physico-chemical properties (MW, number of H-donor, number of aromatic rings, pKa, etc.), using consensus docking, or even post-analysis using FEP-based method.\nOne of the simplest and yet fruitful approach to enhance the virtual screening workflow is using interaction fingerprinting. It has been known for long time that certain interaction from certain residue holds more significance than others. And this is especially true when it comes to receptor, where some residue holds the key for agonism while some others for antagonism (or reverse agonism). This key idea, in turn can be used to analyze the interaction pattern (hence, interaction fingerprinting) to figure out if the ligand is a potential agonist, antagonist, or just a dud.\nWhen I was starting my research (in 2011) on interaction fingerprinting, I found that the earliest use of interaction fingerprinting is in 2004 by Deng et al. under the term Structural Interaction Fingerprinting (SIFt). I do not know if there is any earlier use than that, but if you do please comment below. Back then it was still difficult to find a software that could do interaction fingerprinting. The only (standalone) software I could find was Fingerprintlib by Marcou and Rognan (2007). It is free to use, and you can read the source code too. Now, unfortunately it uses OpenEye Chem library which isn\u0026rsquo;t free back then. Back then, I wanted to use a free (both gratis and open source) tool for interaction fingerprinting, and I thought to myself maybe I could build one with Python programming language!\nFirst, to see if this idea could work I tried to find the alternative(s) for OpenEye Chem. That\u0026rsquo;s when I found out that it turns out OEChem and Open Babel is actually derive from the same code! What a coincidence! And then I\u0026rsquo;m starting by analyzing the algorithm behind Fingerprintlib which is written in C++, alternating between the Fingerprintlib publication paper and reading the code I begin to understand how it works behind the scene. And luckily, the OEChem API and Open Babel API is very similar.\nThe next step, and I think the most difficult part is when I have to learn the Open Babel library. As this is my first time doing a professional programming task, Open Babel is very complicated! There were not many examples on how to use Open Babel in Python library, most of the examples that I found is only from the documentation and O\u0026rsquo;Boyle blog. Therefore I spent 1 month of my time to learn Open Babel API by printing out the Open Babel module I am most likely used: OBMol, OBConversion, OBResidue, OBAtom, etc. then going through lots of trial and error to understand the objects, methods, input, and output from those modules.\nBy the new year eve of 2012 I\u0026rsquo;ve got most of the thing I need to use Open Babel in my library, then I\u0026rsquo;m having my first meeting in a cafe with my colleague, Enade. I can\u0026rsquo;t remember clearly, but for some reason I was riding my bicycle from my home to the cafe, which is about 9 km away as fast as I could that I arrived at the cafe in just 30 minutes LOL. If I remember correctly, the meeting itself was sudden, maybe because I shared some of my \u0026lsquo;fantastic\u0026rsquo; progress to him about using Open Babel \u0026amp; Python to recognize protein structure. And he would like to immediately collaborate with me to produce our own interaction fingerprinting tool.\nOne thing to note is that I was doing this purely out of passion, I didn\u0026rsquo;t receive any compensation apart from having my name came first in our PyPLIF paper. I wasn\u0026rsquo;t doing this to get money either. I really love to share my code to the open source community as I have already receive a lot from them. I also think that it is wonderful to share your work so that other people in the other side of the earth could use it for their work.\nOne month later, by the end of January 2012. PyPLIF alpha is ready! Oh right, I haven\u0026rsquo;t mentioned two important thing. First, PyPLIF can only read/analyze docking results from PLANTS, and second why named with PyPLIF? Back then we have two freely available molecular docking tools, AutoDock Vina and PLANTS. Back then me and Enade didn\u0026rsquo;t use Vina because we didn\u0026rsquo;t like the fact that we have to rely on GUI for every molecule preparation prior to docking (which is turns out to be not true). Second we would like to replicate the study from de Graaf (2011) on SBVS for fragment-like ligands of HRH1, which is using interaction fingerprinting and PLANTS as the docking tool. Since that study is a great success, surely there is a huge potential in using PLANTS and writing an Interaction Fingerprinting tool for PLANTS docking result.\nWhat about PyPLIF? Well, there is a tradition in Python package development where the name of the package begin with Py (which obviously stand for Python). And since the software can be used to analyze protein-ligand interaction hence the name, PyPLIF (Python-based Protein Ligand Interaction Fingerprinting).\nTo check if PyPLIF working as intended we decided to use the simple interaction fingerprint in figure 2 from de Graaf (2011) study. After some comparison and visual inspection we managed to replicate the interaction fingerprint from that. The next step is comparing interaction fingerprint from the whole SBVS campaign. Thanks to the authors courtesy we managed to obtain the interaction fingerprint and start comparing the whole fingerprint. And\u0026hellip; as expected there is a slight differences, which is makes sense because their interaction fingerprinting tool uses OEChem library and our tool uses Open Babel library which in some occasion would recognize molecule/atom in a different way.\nThe next step is of course to publish our work. We didn\u0026rsquo;t aim high back then, therefore we decided to publish PyPLIF in Bioinformation (IF: around 1 when we about to submit our work). And voila! It was accepted as is! No revision or whatsoever. Well, seems like we aim too low. But whatever, I guess that\u0026rsquo;s all for now. The next thing I would like to share is about PyPLIF weaknesses and lack of features. But that will be on the next part.\nHistory 1.0 article ready, without link, or picture. (2020-09-12)\n","permalink":"https://radifar.github.io/posts/2020-09-12-the-story-behind-pyplif-hippos-part-1/","summary":"There are many ways to improve structure-based virtual screening, from something as simple as screening the ligand based on the physico-chemical properties (MW, number of H-donor, number of aromatic rings, pKa, etc.), using consensus docking, or even post-analysis using FEP-based method.\nOne of the simplest and yet fruitful approach to enhance the virtual screening workflow is using interaction fingerprinting. It has been known for long time that certain interaction from certain residue holds more significance than others.","title":"The Story Behind PyPLIF HIPPOS (Part 1)"},{"content":"So yesterday I spent at least 3 hours to deal with Python package development in Conda environment. So I wrote this post as a self-reminder, since the steps are somewhat long. And also for those of you who is facing the same problem as I do.\nWhy do I need to use pip when I can use Conda to install Open Babel If you\u0026rsquo;re an experienced Python package developer you should have known the following trick:\npip install -e .\nFor those of you who do not know, this command is for installing your package in editable mode, which means every change you made to your package will immediately reflected to your environment without having to reinstall your package. Amazing huh?\nThis trick is very useful when I was developing my package and I was satisfied, until\u0026hellip; I made the change to setup.py in order to stage my package to conda-forge so my package can be installed using conda. And then I just figured it out when there is some minor bug in my package recently, and debugging would be much easier if I could see the result every time I patch the code.\nBut alas, for some reason pip install -e . just doesn\u0026rsquo;t work anymore. Well, the first reason is one of my package dependency (Open Babel) can only be installed with Conda or package manager (apt, yum, etc.), and since I added package dependency to setup.py pip will try to install Open Babel which doesn\u0026rsquo;t work. The second reason was, when I run pip install -e . --no-deps with the assumption that my package will use Open Babel from Conda environment, but that doesn\u0026rsquo;t work because package installed with pip in editable mode can not recognize the conda environment.\nMy first approach is by googling the workaround for pip editable mode in Conda environment, but the answers I found were too complicated and require me to create new Conda environment everytime I want to use the development environment via pip install -e . . And then the other alternative is using conda develop command, which is an alternative for pip install -e .. But too bad that conda develop has been abandoned and can not serve its purpose since what I really need is the entrypoint so that every time I update the code I can check my package by typing hippos or hippos-genref command.\nsetup.py come to rescue And then finally, I use my last resort. That is\u0026hellip; by installing Open Babel to my pip environment (inside my Conda environment) from the source. First of all I follow the build instruction for Open Babel. After making sure the requirement satisfied (especially SWIG for SWIG binding)\ntar -zxf openbabel-openbabel-3-1-1.tar.gz cd openbabel-openbabel-3-1-1 mkdir ob-build cd $_ cmake -DRUN_SWIG=ON -DPYTHON_BINDINGS=ON -DCMAKE_INSTALL_PREFIX=../openbabel-install .. make -j4 install And then using the Open Babel pip source file to install Open Babel Python binding to my pip environment with the following command:\ntar -zxf openbabel-3.1.1.1.tar.gz cd openbabel-3.1.1.1 python setup.py build_ext -I ~/radifar.pro/openbabel/openbabel-openbabel-3-1-1/openbabel-install/include/openbabel3/ -L ~/radifar.pro/openbabel/openbabel-openbabel-3-1-1/openbabel-install/lib/ python setup.py install Note here that the -I and -L option is to specify the Open Babel Include and Library directory where you install your Open Babel.\nThen check if Open Babel is installed in pip environment inside Conda environment using conda env export:\n... - xorg-xproto=7.0.31=h14c3975_1007 - xz=5.2.5=h516909a_1 - zlib=1.2.11=h516909a_1006 - pip: - attrs==19.3.0 - coverage==5.2.1 - importlib-metadata==1.7.0 - more-itertools==8.4.0 - openbabel==3.1.0 - packaging==20.4 - pluggy==0.13.1 - py==1.9.0 - pyparsing==2.4.7 - pytest==5.4.3 - pytest-cov==2.10.0 - six==1.15.0 - wcwidth==0.2.5 - zipp==3.1.0 Then check if Open Babel can be imported from my Conda environment:\nPython 3.7.8 | packaged by conda-forge | (default, Jul 23 2020, 03:54:19) [GCC 7.5.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; from openbabel import openbabel \u0026gt;\u0026gt;\u0026gt; Great! Now Open Babel is running perfectly under pip in Conda environment. OK, so that\u0026rsquo;s all folks. Hope this post can help solve your problem. And if you have any question feel free to ask in the comment section below.\n","permalink":"https://radifar.github.io/posts/2020-08-26-editable-pip-in-conda-env/","summary":"So yesterday I spent at least 3 hours to deal with Python package development in Conda environment. So I wrote this post as a self-reminder, since the steps are somewhat long. And also for those of you who is facing the same problem as I do.\nWhy do I need to use pip when I can use Conda to install Open Babel If you\u0026rsquo;re an experienced Python package developer you should have known the following trick:","title":"Installing Open Babel with Pip"},{"content":"Who Am I My name is Muhammad Radifar, but when you contact me just call me Radif. I am from Indonesia. Currently I am a\n Independent Researcher @PICompS Freelancer Research Assistant Computational Chemist, experienced with  Molecular Dynamics  NAMD GROMACS   Homology Modeling  Modeller   Molecular Docking  AutoDock Vina PLANTS   Molecule Visualization  VMD     Software Engineer (Python), experienced with  Open Babel Jupyter Notebook Sphinx documentation   Full Stack Developer  Front End: Vue Back End: Django API: GraphQL    Would Like To Know Me Better? See My Projects link above. Or click on my Github, Twitter, or Linkedin links below.\n","permalink":"https://radifar.github.io/about/","summary":"Who Am I My name is Muhammad Radifar, but when you contact me just call me Radif. I am from Indonesia. Currently I am a\n Independent Researcher @PICompS Freelancer Research Assistant Computational Chemist, experienced with  Molecular Dynamics  NAMD GROMACS   Homology Modeling  Modeller   Molecular Docking  AutoDock Vina PLANTS   Molecule Visualization  VMD     Software Engineer (Python), experienced with  Open Babel Jupyter Notebook Sphinx documentation   Full Stack Developer  Front End: Vue Back End: Django API: GraphQL    Would Like To Know Me Better?","title":"About Me"}]